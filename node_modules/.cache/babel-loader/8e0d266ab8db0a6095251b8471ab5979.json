{"ast":null,"code":"const url = require('url');\n\nconst qs = require('qs');\n\nconst {\n  ParameterError,\n  NotFoundError\n} = require('./errors');\n\nconst {\n  Store,\n  Presenter\n} = require('yayson')();\n\nconst store = new Store();\n\nconst presenters = require('./presenters');\n\nmodule.exports = function () {\n  let {\n    apiKey,\n    fetch,\n    apiHost,\n    apiProtocol\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const httpRequest = async function (method, options) {\n    let {\n      path,\n      json,\n      filter,\n      include,\n      sort,\n      page,\n      raw,\n      type\n    } = options;\n    const API_HOST = options.apiHost || apiHost || process.env.API_HOST || 'api.confetti.events';\n    const API_PROTOCOL = options.apiProtocol || apiProtocol || process.env.API_PROTOCOL || 'https';\n    let API_KEY = options.apiKey || apiKey;\n    let fetchLib = options.fetch || fetch;\n\n    if (!fetchLib) {\n      fetchLib = require('node-fetch');\n    }\n\n    if (!API_KEY) {\n      throw new Error('missing_api_key');\n    }\n\n    if (Array.isArray(include)) {\n      include = encodeURI(include.join(','));\n    }\n\n    const httpOptions = {\n      method,\n      timeout: method === 'get' ? 5000 : 15000,\n      headers: {\n        Authorization: `apikey ${API_KEY}`,\n        'Content-Type': 'application/json',\n        'Accept-Encoding': 'gzip'\n      }\n    };\n    const fetchUrl = url.format({\n      host: API_HOST,\n      protocol: API_PROTOCOL,\n      pathname: path,\n      search: qs.stringify({\n        filter,\n        sort,\n        page,\n        include\n      })\n    });\n\n    if (json) {\n      httpOptions.body = JSON.stringify(presenters[type].render(json));\n    }\n\n    const res = await fetchLib(fetchUrl, httpOptions);\n\n    if (res.status >= 200 && res.status < 299) {\n      const contentType = res.headers.get('content-type') || '';\n\n      if (contentType.includes('application/json')) {\n        const body = await res.json();\n\n        if (raw) {\n          return body;\n        } else {\n          return store.sync(body);\n        }\n      } else {\n        return await res.text();\n      }\n    } else {\n      let errorBody;\n\n      if (res.status >= 400 && res.status < 499) {\n        const contentType = res.headers.get('content-type') || '';\n\n        if (contentType.includes('application/json')) {\n          errorBody = await res.json();\n        } else {\n          errorBody = await res.text();\n        }\n      }\n\n      if (res.status == 400) {\n        throw new ParameterError('validation', errorBody);\n      } else if (res.status == 404) {\n        throw new NotFoundError(errorBody.message || 'object', errorBody);\n      } else {\n        throw new Error();\n      }\n    }\n  };\n\n  const adapter = {\n    async put(options) {\n      return await httpRequest('put', options);\n    },\n\n    async post(options) {\n      return await httpRequest('post', options);\n    },\n\n    async get(options) {\n      return await httpRequest('get', options);\n    },\n\n    async delete(options) {\n      return await httpRequest('delete', options);\n    }\n\n  };\n  return adapter;\n};","map":{"version":3,"names":["url","require","qs","ParameterError","NotFoundError","Store","Presenter","store","presenters","module","exports","apiKey","fetch","apiHost","apiProtocol","httpRequest","method","options","path","json","filter","include","sort","page","raw","type","API_HOST","process","env","API_PROTOCOL","API_KEY","fetchLib","Error","Array","isArray","encodeURI","join","httpOptions","timeout","headers","Authorization","fetchUrl","format","host","protocol","pathname","search","stringify","body","JSON","render","res","status","contentType","get","includes","sync","text","errorBody","message","adapter","put","post","delete"],"sources":["/home/getssh/dice_game/node_modules/confetti/src/adapter.js"],"sourcesContent":["const url = require('url')\nconst qs = require('qs')\n\nconst { ParameterError, NotFoundError } = require('./errors')\n\nconst { Store, Presenter } = require('yayson')()\nconst store = new Store()\n\nconst presenters = require('./presenters')\n\nmodule.exports = function ({ apiKey, fetch, apiHost, apiProtocol } = {}) {\n  const httpRequest = async function (method, options) {\n    let { path, json, filter, include, sort, page, raw, type } = options\n\n    const API_HOST =\n      options.apiHost ||\n      apiHost ||\n      process.env.API_HOST ||\n      'api.confetti.events'\n\n    const API_PROTOCOL =\n      options.apiProtocol || apiProtocol || process.env.API_PROTOCOL || 'https'\n\n    let API_KEY = options.apiKey || apiKey\n    let fetchLib = options.fetch || fetch\n\n    if (!fetchLib) {\n      fetchLib = require('node-fetch')\n    }\n    if (!API_KEY) {\n      throw new Error('missing_api_key')\n    }\n    if (Array.isArray(include)) {\n      include = encodeURI(include.join(','))\n    }\n\n    const httpOptions = {\n      method,\n      timeout: method === 'get' ? 5000 : 15000,\n      headers: {\n        Authorization: `apikey ${API_KEY}`,\n        'Content-Type': 'application/json',\n        'Accept-Encoding': 'gzip',\n      },\n    }\n    const fetchUrl = url.format({\n      host: API_HOST,\n      protocol: API_PROTOCOL,\n      pathname: path,\n      search: qs.stringify({ filter, sort, page, include }),\n    })\n    if (json) {\n      httpOptions.body = JSON.stringify(presenters[type].render(json))\n    }\n\n    const res = await fetchLib(fetchUrl, httpOptions)\n\n    if (res.status >= 200 && res.status < 299) {\n      const contentType = res.headers.get('content-type') || ''\n      if (contentType.includes('application/json')) {\n        const body = await res.json()\n        if (raw) {\n          return body\n        } else {\n          return store.sync(body)\n        }\n      } else {\n        return await res.text()\n      }\n    } else {\n      let errorBody\n      if (res.status >= 400 && res.status < 499) {\n        const contentType = res.headers.get('content-type') || ''\n        if (contentType.includes('application/json')) {\n          errorBody = await res.json()\n        } else {\n          errorBody = await res.text()\n        }\n      }\n      if (res.status == 400) {\n        throw new ParameterError('validation', errorBody)\n      } else if (res.status == 404) {\n        throw new NotFoundError(errorBody.message || 'object', errorBody)\n      } else {\n        throw new Error()\n      }\n    }\n  }\n\n  const adapter = {\n    async put(options) {\n      return await httpRequest('put', options)\n    },\n\n    async post(options) {\n      return await httpRequest('post', options)\n    },\n\n    async get(options) {\n      return await httpRequest('get', options)\n    },\n\n    async delete(options) {\n      return await httpRequest('delete', options)\n    },\n  }\n\n  return adapter\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}