{"ast":null,"code":"module.exports = function (utils) {\n  var Record, Store;\n  Record = class Record {\n    constructor(options) {\n      ({\n        id: this.id,\n        type: this.type,\n        attributes: this.attributes,\n        relationships: this.relationships,\n        links: this.links,\n        meta: this.meta\n      } = options);\n    }\n\n  };\n  return Store = class Store {\n    constructor(options) {\n      this.reset();\n    }\n\n    reset() {\n      this.records = [];\n      return this.relations = {};\n    }\n\n    toModel(rec, type, models) {\n      var base, currentModel, data, key, links, meta, model, name, ref, rel, resolve, typeAttribute;\n      model = utils.clone(rec.attributes) || {};\n\n      if (model.type) {\n        typeAttribute = model.type;\n      }\n\n      model.id = rec.id;\n      model.type = rec.type;\n      models[type] || (models[type] = {});\n      (base = models[type])[name = rec.id] || (base[name] = model);\n\n      if (model.hasOwnProperty('meta')) {\n        model.attributes = {\n          meta: model.meta\n        };\n        delete model.meta;\n      }\n\n      if (rec.meta != null) {\n        model.meta = rec.meta;\n      }\n\n      if (rec.links != null) {\n        model.links = rec.links;\n      }\n\n      if (rec.relationships != null) {\n        ref = rec.relationships;\n\n        for (key in ref) {\n          rel = ref[key];\n          data = rel.data;\n          links = rel.links;\n          meta = rel.meta;\n          model[key] = null;\n\n          if (!(data != null || links != null)) {\n            continue;\n          }\n\n          resolve = _ref => {\n            let {\n              type,\n              id\n            } = _ref;\n            return this.find(type, id, models);\n          };\n\n          model[key] = data instanceof Array ? data.map(resolve) : data != null ? resolve(data) : {}; // Model of the relation\n\n          currentModel = model[key];\n\n          if (currentModel != null) {\n            // retain the links and meta from the relationship entry\n            // use as underscore property name because the currentModel may also have a link and meta reference\n            currentModel._links = links || {};\n            currentModel._meta = meta || {};\n          }\n        }\n      }\n\n      if (typeAttribute) {\n        model.type = typeAttribute;\n      }\n\n      return model;\n    }\n\n    findRecord(type, id) {\n      return utils.find(this.records, function (r) {\n        return r.type === type && r.id === id;\n      });\n    }\n\n    findRecords(type) {\n      return utils.filter(this.records, function (r) {\n        return r.type === type;\n      });\n    }\n\n    find(type, id) {\n      let models = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var rec;\n      rec = this.findRecord(type, id);\n\n      if (rec == null) {\n        return null;\n      }\n\n      models[type] || (models[type] = {});\n      return models[type][id] || this.toModel(rec, type, models);\n    }\n\n    findAll(type) {\n      let models = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var recs;\n      recs = this.findRecords(type);\n\n      if (recs == null) {\n        return [];\n      }\n\n      recs.forEach(rec => {\n        models[type] || (models[type] = {});\n        return this.toModel(rec, type, models);\n      });\n      return utils.values(models[type]);\n    }\n\n    remove(type, id) {\n      var records, remove;\n\n      remove = record => {\n        var index;\n        index = this.records.indexOf(record);\n\n        if (!(index < 0)) {\n          return this.records.splice(index, 1);\n        }\n      };\n\n      if (id != null) {\n        return remove(this.findRecord(type, id));\n      } else {\n        records = this.findRecords(type);\n        return records.map(remove);\n      }\n    }\n\n    sync(body) {\n      var models, recs, result, sync;\n\n      sync = data => {\n        var add;\n\n        if (data == null) {\n          return null;\n        }\n\n        add = obj => {\n          var id, rec, type;\n          ({\n            type,\n            id\n          } = obj);\n          this.remove(type, id);\n          rec = new Record(obj);\n          this.records.push(rec);\n          return rec;\n        };\n\n        if (data instanceof Array) {\n          return data.map(add);\n        } else {\n          return add(data);\n        }\n      };\n\n      sync(body.included);\n      recs = sync(body.data);\n\n      if (recs == null) {\n        return null;\n      }\n\n      models = {};\n      result = null;\n\n      if (recs instanceof Array) {\n        result = recs.map(rec => {\n          return this.toModel(rec, rec.type, models);\n        });\n      } else {\n        result = this.toModel(recs, recs.type, models);\n      }\n\n      if (body.hasOwnProperty('links')) {\n        result.links = body.links;\n      }\n\n      if (body.hasOwnProperty('meta')) {\n        result.meta = body.meta;\n      }\n\n      return result;\n    }\n\n  };\n};","map":{"version":3,"names":["module","exports","utils","Record","Store","constructor","options","id","type","attributes","relationships","links","meta","reset","records","relations","toModel","rec","models","base","currentModel","data","key","model","name","ref","rel","resolve","typeAttribute","clone","hasOwnProperty","find","Array","map","_links","_meta","findRecord","r","findRecords","filter","findAll","recs","forEach","values","remove","record","index","indexOf","splice","sync","body","result","add","obj","push","included"],"sources":["/home/getssh/dice_game/node_modules/yayson/lib/yayson/store.js"],"sourcesContent":["module.exports = function(utils) {\n  var Record, Store;\n  Record = class Record {\n    constructor(options) {\n      ({id: this.id, type: this.type, attributes: this.attributes, relationships: this.relationships, links: this.links, meta: this.meta} = options);\n    }\n\n  };\n  return Store = class Store {\n    constructor(options) {\n      this.reset();\n    }\n\n    reset() {\n      this.records = [];\n      return this.relations = {};\n    }\n\n    toModel(rec, type, models) {\n      var base, currentModel, data, key, links, meta, model, name, ref, rel, resolve, typeAttribute;\n      model = utils.clone(rec.attributes) || {};\n      if (model.type) {\n        typeAttribute = model.type;\n      }\n      model.id = rec.id;\n      model.type = rec.type;\n      models[type] || (models[type] = {});\n      (base = models[type])[name = rec.id] || (base[name] = model);\n      if (model.hasOwnProperty('meta')) {\n        model.attributes = {\n          meta: model.meta\n        };\n        delete model.meta;\n      }\n      if (rec.meta != null) {\n        model.meta = rec.meta;\n      }\n      if (rec.links != null) {\n        model.links = rec.links;\n      }\n      if (rec.relationships != null) {\n        ref = rec.relationships;\n        for (key in ref) {\n          rel = ref[key];\n          data = rel.data;\n          links = rel.links;\n          meta = rel.meta;\n          model[key] = null;\n          if (!((data != null) || (links != null))) {\n            continue;\n          }\n          resolve = ({type, id}) => {\n            return this.find(type, id, models);\n          };\n          model[key] = data instanceof Array ? data.map(resolve) : data != null ? resolve(data) : {};\n          // Model of the relation\n          currentModel = model[key];\n          if (currentModel != null) {\n            // retain the links and meta from the relationship entry\n            // use as underscore property name because the currentModel may also have a link and meta reference\n            currentModel._links = links || {};\n            currentModel._meta = meta || {};\n          }\n        }\n      }\n      if (typeAttribute) {\n        model.type = typeAttribute;\n      }\n      return model;\n    }\n\n    findRecord(type, id) {\n      return utils.find(this.records, function(r) {\n        return r.type === type && r.id === id;\n      });\n    }\n\n    findRecords(type) {\n      return utils.filter(this.records, function(r) {\n        return r.type === type;\n      });\n    }\n\n    find(type, id, models = {}) {\n      var rec;\n      rec = this.findRecord(type, id);\n      if (rec == null) {\n        return null;\n      }\n      models[type] || (models[type] = {});\n      return models[type][id] || this.toModel(rec, type, models);\n    }\n\n    findAll(type, models = {}) {\n      var recs;\n      recs = this.findRecords(type);\n      if (recs == null) {\n        return [];\n      }\n      recs.forEach((rec) => {\n        models[type] || (models[type] = {});\n        return this.toModel(rec, type, models);\n      });\n      return utils.values(models[type]);\n    }\n\n    remove(type, id) {\n      var records, remove;\n      remove = (record) => {\n        var index;\n        index = this.records.indexOf(record);\n        if (!(index < 0)) {\n          return this.records.splice(index, 1);\n        }\n      };\n      if (id != null) {\n        return remove(this.findRecord(type, id));\n      } else {\n        records = this.findRecords(type);\n        return records.map(remove);\n      }\n    }\n\n    sync(body) {\n      var models, recs, result, sync;\n      sync = (data) => {\n        var add;\n        if (data == null) {\n          return null;\n        }\n        add = (obj) => {\n          var id, rec, type;\n          ({type, id} = obj);\n          this.remove(type, id);\n          rec = new Record(obj);\n          this.records.push(rec);\n          return rec;\n        };\n        if (data instanceof Array) {\n          return data.map(add);\n        } else {\n          return add(data);\n        }\n      };\n      sync(body.included);\n      recs = sync(body.data);\n      if (recs == null) {\n        return null;\n      }\n      models = {};\n      result = null;\n      if (recs instanceof Array) {\n        result = recs.map((rec) => {\n          return this.toModel(rec, rec.type, models);\n        });\n      } else {\n        result = this.toModel(recs, recs.type, models);\n      }\n      if (body.hasOwnProperty('links')) {\n        result.links = body.links;\n      }\n      if (body.hasOwnProperty('meta')) {\n        result.meta = body.meta;\n      }\n      return result;\n    }\n\n  };\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;EAC/B,IAAIC,MAAJ,EAAYC,KAAZ;EACAD,MAAM,GAAG,MAAMA,MAAN,CAAa;IACpBE,WAAW,CAACC,OAAD,EAAU;MACnB,CAAC;QAACC,EAAE,EAAE,KAAKA,EAAV;QAAcC,IAAI,EAAE,KAAKA,IAAzB;QAA+BC,UAAU,EAAE,KAAKA,UAAhD;QAA4DC,aAAa,EAAE,KAAKA,aAAhF;QAA+FC,KAAK,EAAE,KAAKA,KAA3G;QAAkHC,IAAI,EAAE,KAAKA;MAA7H,IAAqIN,OAAtI;IACD;;EAHmB,CAAtB;EAMA,OAAOF,KAAK,GAAG,MAAMA,KAAN,CAAY;IACzBC,WAAW,CAACC,OAAD,EAAU;MACnB,KAAKO,KAAL;IACD;;IAEDA,KAAK,GAAG;MACN,KAAKC,OAAL,GAAe,EAAf;MACA,OAAO,KAAKC,SAAL,GAAiB,EAAxB;IACD;;IAEDC,OAAO,CAACC,GAAD,EAAMT,IAAN,EAAYU,MAAZ,EAAoB;MACzB,IAAIC,IAAJ,EAAUC,YAAV,EAAwBC,IAAxB,EAA8BC,GAA9B,EAAmCX,KAAnC,EAA0CC,IAA1C,EAAgDW,KAAhD,EAAuDC,IAAvD,EAA6DC,GAA7D,EAAkEC,GAAlE,EAAuEC,OAAvE,EAAgFC,aAAhF;MACAL,KAAK,GAAGrB,KAAK,CAAC2B,KAAN,CAAYZ,GAAG,CAACR,UAAhB,KAA+B,EAAvC;;MACA,IAAIc,KAAK,CAACf,IAAV,EAAgB;QACdoB,aAAa,GAAGL,KAAK,CAACf,IAAtB;MACD;;MACDe,KAAK,CAAChB,EAAN,GAAWU,GAAG,CAACV,EAAf;MACAgB,KAAK,CAACf,IAAN,GAAaS,GAAG,CAACT,IAAjB;MACAU,MAAM,CAACV,IAAD,CAAN,KAAiBU,MAAM,CAACV,IAAD,CAAN,GAAe,EAAhC;MACA,CAACW,IAAI,GAAGD,MAAM,CAACV,IAAD,CAAd,EAAsBgB,IAAI,GAAGP,GAAG,CAACV,EAAjC,MAAyCY,IAAI,CAACK,IAAD,CAAJ,GAAaD,KAAtD;;MACA,IAAIA,KAAK,CAACO,cAAN,CAAqB,MAArB,CAAJ,EAAkC;QAChCP,KAAK,CAACd,UAAN,GAAmB;UACjBG,IAAI,EAAEW,KAAK,CAACX;QADK,CAAnB;QAGA,OAAOW,KAAK,CAACX,IAAb;MACD;;MACD,IAAIK,GAAG,CAACL,IAAJ,IAAY,IAAhB,EAAsB;QACpBW,KAAK,CAACX,IAAN,GAAaK,GAAG,CAACL,IAAjB;MACD;;MACD,IAAIK,GAAG,CAACN,KAAJ,IAAa,IAAjB,EAAuB;QACrBY,KAAK,CAACZ,KAAN,GAAcM,GAAG,CAACN,KAAlB;MACD;;MACD,IAAIM,GAAG,CAACP,aAAJ,IAAqB,IAAzB,EAA+B;QAC7Be,GAAG,GAAGR,GAAG,CAACP,aAAV;;QACA,KAAKY,GAAL,IAAYG,GAAZ,EAAiB;UACfC,GAAG,GAAGD,GAAG,CAACH,GAAD,CAAT;UACAD,IAAI,GAAGK,GAAG,CAACL,IAAX;UACAV,KAAK,GAAGe,GAAG,CAACf,KAAZ;UACAC,IAAI,GAAGc,GAAG,CAACd,IAAX;UACAW,KAAK,CAACD,GAAD,CAAL,GAAa,IAAb;;UACA,IAAI,EAAGD,IAAI,IAAI,IAAT,IAAmBV,KAAK,IAAI,IAA9B,CAAJ,EAA0C;YACxC;UACD;;UACDgB,OAAO,GAAG,QAAgB;YAAA,IAAf;cAACnB,IAAD;cAAOD;YAAP,CAAe;YACxB,OAAO,KAAKwB,IAAL,CAAUvB,IAAV,EAAgBD,EAAhB,EAAoBW,MAApB,CAAP;UACD,CAFD;;UAGAK,KAAK,CAACD,GAAD,CAAL,GAAaD,IAAI,YAAYW,KAAhB,GAAwBX,IAAI,CAACY,GAAL,CAASN,OAAT,CAAxB,GAA4CN,IAAI,IAAI,IAAR,GAAeM,OAAO,CAACN,IAAD,CAAtB,GAA+B,EAAxF,CAZe,CAaf;;UACAD,YAAY,GAAGG,KAAK,CAACD,GAAD,CAApB;;UACA,IAAIF,YAAY,IAAI,IAApB,EAA0B;YACxB;YACA;YACAA,YAAY,CAACc,MAAb,GAAsBvB,KAAK,IAAI,EAA/B;YACAS,YAAY,CAACe,KAAb,GAAqBvB,IAAI,IAAI,EAA7B;UACD;QACF;MACF;;MACD,IAAIgB,aAAJ,EAAmB;QACjBL,KAAK,CAACf,IAAN,GAAaoB,aAAb;MACD;;MACD,OAAOL,KAAP;IACD;;IAEDa,UAAU,CAAC5B,IAAD,EAAOD,EAAP,EAAW;MACnB,OAAOL,KAAK,CAAC6B,IAAN,CAAW,KAAKjB,OAAhB,EAAyB,UAASuB,CAAT,EAAY;QAC1C,OAAOA,CAAC,CAAC7B,IAAF,KAAWA,IAAX,IAAmB6B,CAAC,CAAC9B,EAAF,KAASA,EAAnC;MACD,CAFM,CAAP;IAGD;;IAED+B,WAAW,CAAC9B,IAAD,EAAO;MAChB,OAAON,KAAK,CAACqC,MAAN,CAAa,KAAKzB,OAAlB,EAA2B,UAASuB,CAAT,EAAY;QAC5C,OAAOA,CAAC,CAAC7B,IAAF,KAAWA,IAAlB;MACD,CAFM,CAAP;IAGD;;IAEDuB,IAAI,CAACvB,IAAD,EAAOD,EAAP,EAAwB;MAAA,IAAbW,MAAa,uEAAJ,EAAI;MAC1B,IAAID,GAAJ;MACAA,GAAG,GAAG,KAAKmB,UAAL,CAAgB5B,IAAhB,EAAsBD,EAAtB,CAAN;;MACA,IAAIU,GAAG,IAAI,IAAX,EAAiB;QACf,OAAO,IAAP;MACD;;MACDC,MAAM,CAACV,IAAD,CAAN,KAAiBU,MAAM,CAACV,IAAD,CAAN,GAAe,EAAhC;MACA,OAAOU,MAAM,CAACV,IAAD,CAAN,CAAaD,EAAb,KAAoB,KAAKS,OAAL,CAAaC,GAAb,EAAkBT,IAAlB,EAAwBU,MAAxB,CAA3B;IACD;;IAEDsB,OAAO,CAAChC,IAAD,EAAoB;MAAA,IAAbU,MAAa,uEAAJ,EAAI;MACzB,IAAIuB,IAAJ;MACAA,IAAI,GAAG,KAAKH,WAAL,CAAiB9B,IAAjB,CAAP;;MACA,IAAIiC,IAAI,IAAI,IAAZ,EAAkB;QAChB,OAAO,EAAP;MACD;;MACDA,IAAI,CAACC,OAAL,CAAczB,GAAD,IAAS;QACpBC,MAAM,CAACV,IAAD,CAAN,KAAiBU,MAAM,CAACV,IAAD,CAAN,GAAe,EAAhC;QACA,OAAO,KAAKQ,OAAL,CAAaC,GAAb,EAAkBT,IAAlB,EAAwBU,MAAxB,CAAP;MACD,CAHD;MAIA,OAAOhB,KAAK,CAACyC,MAAN,CAAazB,MAAM,CAACV,IAAD,CAAnB,CAAP;IACD;;IAEDoC,MAAM,CAACpC,IAAD,EAAOD,EAAP,EAAW;MACf,IAAIO,OAAJ,EAAa8B,MAAb;;MACAA,MAAM,GAAIC,MAAD,IAAY;QACnB,IAAIC,KAAJ;QACAA,KAAK,GAAG,KAAKhC,OAAL,CAAaiC,OAAb,CAAqBF,MAArB,CAAR;;QACA,IAAI,EAAEC,KAAK,GAAG,CAAV,CAAJ,EAAkB;UAChB,OAAO,KAAKhC,OAAL,CAAakC,MAAb,CAAoBF,KAApB,EAA2B,CAA3B,CAAP;QACD;MACF,CAND;;MAOA,IAAIvC,EAAE,IAAI,IAAV,EAAgB;QACd,OAAOqC,MAAM,CAAC,KAAKR,UAAL,CAAgB5B,IAAhB,EAAsBD,EAAtB,CAAD,CAAb;MACD,CAFD,MAEO;QACLO,OAAO,GAAG,KAAKwB,WAAL,CAAiB9B,IAAjB,CAAV;QACA,OAAOM,OAAO,CAACmB,GAAR,CAAYW,MAAZ,CAAP;MACD;IACF;;IAEDK,IAAI,CAACC,IAAD,EAAO;MACT,IAAIhC,MAAJ,EAAYuB,IAAZ,EAAkBU,MAAlB,EAA0BF,IAA1B;;MACAA,IAAI,GAAI5B,IAAD,IAAU;QACf,IAAI+B,GAAJ;;QACA,IAAI/B,IAAI,IAAI,IAAZ,EAAkB;UAChB,OAAO,IAAP;QACD;;QACD+B,GAAG,GAAIC,GAAD,IAAS;UACb,IAAI9C,EAAJ,EAAQU,GAAR,EAAaT,IAAb;UACA,CAAC;YAACA,IAAD;YAAOD;UAAP,IAAa8C,GAAd;UACA,KAAKT,MAAL,CAAYpC,IAAZ,EAAkBD,EAAlB;UACAU,GAAG,GAAG,IAAId,MAAJ,CAAWkD,GAAX,CAAN;UACA,KAAKvC,OAAL,CAAawC,IAAb,CAAkBrC,GAAlB;UACA,OAAOA,GAAP;QACD,CAPD;;QAQA,IAAII,IAAI,YAAYW,KAApB,EAA2B;UACzB,OAAOX,IAAI,CAACY,GAAL,CAASmB,GAAT,CAAP;QACD,CAFD,MAEO;UACL,OAAOA,GAAG,CAAC/B,IAAD,CAAV;QACD;MACF,CAlBD;;MAmBA4B,IAAI,CAACC,IAAI,CAACK,QAAN,CAAJ;MACAd,IAAI,GAAGQ,IAAI,CAACC,IAAI,CAAC7B,IAAN,CAAX;;MACA,IAAIoB,IAAI,IAAI,IAAZ,EAAkB;QAChB,OAAO,IAAP;MACD;;MACDvB,MAAM,GAAG,EAAT;MACAiC,MAAM,GAAG,IAAT;;MACA,IAAIV,IAAI,YAAYT,KAApB,EAA2B;QACzBmB,MAAM,GAAGV,IAAI,CAACR,GAAL,CAAUhB,GAAD,IAAS;UACzB,OAAO,KAAKD,OAAL,CAAaC,GAAb,EAAkBA,GAAG,CAACT,IAAtB,EAA4BU,MAA5B,CAAP;QACD,CAFQ,CAAT;MAGD,CAJD,MAIO;QACLiC,MAAM,GAAG,KAAKnC,OAAL,CAAayB,IAAb,EAAmBA,IAAI,CAACjC,IAAxB,EAA8BU,MAA9B,CAAT;MACD;;MACD,IAAIgC,IAAI,CAACpB,cAAL,CAAoB,OAApB,CAAJ,EAAkC;QAChCqB,MAAM,CAACxC,KAAP,GAAeuC,IAAI,CAACvC,KAApB;MACD;;MACD,IAAIuC,IAAI,CAACpB,cAAL,CAAoB,MAApB,CAAJ,EAAiC;QAC/BqB,MAAM,CAACvC,IAAP,GAAcsC,IAAI,CAACtC,IAAnB;MACD;;MACD,OAAOuC,MAAP;IACD;;EA7JwB,CAA3B;AAgKD,CAxKD"},"metadata":{},"sourceType":"script"}